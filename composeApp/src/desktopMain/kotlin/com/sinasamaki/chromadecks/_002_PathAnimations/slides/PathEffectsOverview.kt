package com.sinasamaki.chromadecks._002_PathAnimations.slides

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.LinearEasing
import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.animation.core.tween
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.ColumnScope
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.CacheDrawScope
import androidx.compose.ui.draw.DrawResult
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.drawWithCache
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Matrix
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.PathEffect
import androidx.compose.ui.graphics.PathMeasure
import androidx.compose.ui.graphics.StampedPathEffectStyle
import androidx.compose.ui.graphics.StrokeCap
import androidx.compose.ui.graphics.addSvg
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.drawscope.scale
import androidx.compose.ui.graphics.drawscope.translate
import androidx.compose.ui.unit.dp
import com.sinasamaki.chromadecks.data.ListSlideAdvanced
import com.sinasamaki.chromadecks.extensions.nextFloat
import com.sinasamaki.chromadecks.ui.theme.Amber300
import com.sinasamaki.chromadecks.ui.theme.Amber600
import com.sinasamaki.chromadecks.ui.theme.Emerald300
import com.sinasamaki.chromadecks.ui.theme.Lime300
import com.sinasamaki.chromadecks.ui.theme.Lime400
import com.sinasamaki.chromadecks.ui.theme.Neutral800
import com.sinasamaki.chromadecks.ui.theme.Orange600
import com.sinasamaki.chromadecks.ui.theme.Slate50
import com.sinasamaki.chromadecks.ui.theme.White
import com.sinasamaki.chromadecks.ui.theme.Yellow200
import com.sinasamaki.chromadecks.ui.theme.Yellow400
import com.sinasamaki.chromadecks.ui.util.ChainedPathEffect
import kotlin.random.Random

const val scratchSvg = """
    m15.78947,130c0,0 1.05263,0 3.1579,0c9.47368,0 18.94737,0 32.63158,0c15.78947,0 35.78947,0 57.89474,0c26.31579,0 54.73684,0 84.21052,0c32.63159,0 66.3158,0 97.89474,0c30.52631,0 63.1579,0 93.6842,0c21.05264,0 38.94739,0 61.05264,0c20,0 31.57895,0 42.10526,0c10.52631,0 22.12463,0.85771 33.68423,2.10527c8.43756,0.91061 16.85168,2.03143 25.26312,3.15788c7.37738,0.98796 13.6842,3.15788 21.05267,4.21053c7.36841,1.05263 13.75385,1.74982 20,3.1579c7.47565,1.68524 14.72784,3.22256 22.10522,4.21053c8.4115,1.12645 16.93097,1.60558 24.21051,3.1579c7.49481,1.59822 15.69867,3.58116 29.47369,6.3158c6.28033,1.24678 12.78131,2.48523 18.94739,4.21053c5.45892,1.52744 9.33502,3.46167 13.6842,5.26315c3.07532,1.27385 5.67041,3.07117 8.42108,4.21053c1.94495,0.80563 4.21051,2.10529 6.31573,3.1579c2.10529,1.05264 4.77759,3.79625 7.36847,5.26315c3.77673,2.13835 7.36841,3.1579 10.52631,5.26315c3.1579,2.10527 5.07758,3.66974 7.36841,4.21053c1.02448,0.24184 3.1579,1.05266 4.21051,2.10527c1.05267,1.05264 2.41357,0.30832 3.1579,1.05263c0.74432,0.74432 0,1.05264 0,1.05264c0,0 0,1.05263 0,1.05263c-3.1579,0 -9.43585,1.27275 -21.05261,3.1579c-14.69421,2.38455 -35.75513,4.43117 -62.10529,8.42105c-29.43738,4.45734 -88.40479,12.71332 -114.73682,17.89473c-32.61182,6.4171 -65.15323,13.13655 -97.89474,20c-32.53012,6.81914 -64.25937,11.35231 -98.94736,18.94737c-32.67902,7.15518 -68.52512,14.23438 -105.26317,22.10526c-36.95367,7.91708 -72.66611,16.64819 -96.8421,21.05264c-22.1383,4.0332 -47.32726,7.68002 -62.10526,9.47369c-10.50175,1.27463 -24.17472,1.5784 -35.78948,2.10526c-9.46395,0.42929 -16.83646,-0.05209 -26.31579,-1.05264c-10.52037,-1.11044 -17.98173,-2.83627 -26.31579,-5.26315c-6.39193,-1.86133 -10.66632,-2.70474 -14.73684,-4.21054c-4.4151,-1.63324 -7.45099,-2.93665 -10.52632,-4.21051c-2.17459,-0.90076 -2.97237,-1.56448 -5.26316,-2.10526c-2.04895,-0.48367 -3.15789,-1.05264 -4.21053,-1.05264c0,0 -0.13312,-0.32474 2.10526,-1.05264c12.1781,-3.96014 25.23977,-5.35782 42.10526,-9.47366c22.07535,-5.38724 48.31204,-11.17831 77.89474,-15.78949c31.47829,-4.90665 65.25487,-9.53842 97.89474,-13.6842c33.67578,-4.27736 67.36841,-8.42105 99.99998,-12.63158c32.63159,-4.21053 64.13745,-8.18028 94.73685,-10.52632c21.01727,-1.61139 38.94736,-2.10526 61.05264,-2.10526c17.89471,0 32.63156,0 51.57895,0c17.89471,0 34.73682,0 51.57892,0c17.89478,0 34.73688,0 46.3158,0c10.52631,0 22.06158,1.57814 31.57898,2.10526c8.40814,0.46568 16.86328,0.45569 25.26312,1.05264c7.4245,0.52763 13.6842,1.05263 21.05267,1.05263c4.21051,0 8.42102,1.05263 12.63153,1.05263c2.10529,0 4.21057,0 5.26318,0c1.05261,0 2.10529,0 2.10529,1.05263c0,0 -1.05267,0 -5.26318,0c-8.42108,0 -19.99164,-1.19579 -36.8421,-2.10526c-23.14813,-1.24937 -51.56665,-1.57889 -85.26318,-2.10527c-50.52014,-0.7892 -104.21887,-1.17259 -186.31577,0c-36.85336,0.52638 -83.13235,2.63081 -121.05263,4.21053c-37.87651,1.57788 -82.10913,3.00998 -125.26316,4.21053c-33.68762,0.93718 -58.94737,2.10527 -78.94737,2.10527c-9.47368,0 -18.94737,0 -27.36842,0c-6.31579,0 -8.42105,0 -10.52632,0c-1.05263,0 -1.02897,-0.66678 2.10526,-1.05263c4.3076,-0.53029 11.54409,-2.28487 27.36842,-5.26317c17.8577,-3.36099 40.99648,-7.74487 82.10526,-13.6842c38.89751,-5.61984 71.54198,-8.94543 112.63158,-11.57895c41.02242,-2.62921 94.72908,-4.73682 148.42107,-5.26315c46.31354,-0.45401 82.10526,0 133.68417,0c52.63159,0 88.43036,-0.34377 133.68427,1.05263c27.37561,0.84473 49.48889,3.02823 76.8421,6.3158c25.27783,3.03812 36.75342,5.71207 46.31573,7.36841c8.36212,1.44844 15.86505,2.83289 21.05267,4.21053c3.21722,0.85437 5.9931,2.58823 7.36841,3.1579c0.97247,0.40282 2.10529,0 2.10529,1.05264c0,0 0,0 0,1.05263c0,0 -1.07922,0.92772 -6.3158,2.10526c-8.46881,1.90434 -20.01935,4.10913 -36.8421,7.36842c-15.80823,3.06273 -35.79364,7.35127 -62.10529,13.68422c-30.53113,7.34851 -74.63965,18.30325 -135.78949,32.63156c-46.24438,10.83575 -86.4845,20.35751 -144.21051,34.73685c-44.34653,11.04654 -70.66357,17.28516 -100,24.21054c-32.7991,7.74283 -60.10239,15.39923 -76.8421,20c-10.59686,2.91245 -18.99641,5.1041 -29.47368,8.42105c-6.34695,2.00937 -9.47369,3.1579 -12.63159,4.21051c0,0 0,1.05264 0,1.05264c2.10527,0 6.3158,0 14.73685,0c14.73685,0 35.78947,0 73.68422,0c49.47366,0 100,0 155.78946,0c42.10529,0 78.94736,0 124.21054,0c40,0 75.78949,0 100,0c14.73682,0 33.6955,-0.72263 56.8421,0c16.86676,0.52658 30.54663,0.39859 41.05261,1.05264c8.47021,0.52731 15.78949,1.05261 20,1.05261c3.1579,0 4.94049,0.48294 6.3158,1.05264c0.97247,0.40283 1.05261,0 1.05261,1.05261c0,0 0,0 -1.05261,0c-3.1579,0 -10.48846,1.27277 -22.10522,3.1579c-29.38849,4.7691 -47.33142,5.57523 -72.63159,8.42105c-42.05011,4.72989 -90.54205,9.2998 -126.3158,12.63159c-53.70917,5.0022 -118.88312,11.2439 -173.68423,15.78946c-45.2179,3.75067 -87.37033,5.2175 -137.89471,7.36844c-48.42294,2.06146 -90.53099,4.09109 -118.94737,5.26315c-23.16212,0.95532 -49.45546,2.3063 -71.57895,4.21054c-13.67408,1.17697 -23.10876,2.63055 -31.57895,3.15787c-4.20239,0.26163 -8.34294,0.52374 -13.68421,1.05264c-3.14252,0.31119 -5.26316,1.05264 -6.31579,1.05264c0,0 1.08406,0.57431 6.31579,0c9.64684,-1.05896 30.44399,-5.88638 60,-9.47369c42.00698,-5.09854 96.85461,-11.46338 155.78947,-17.89474c47.37865,-5.17026 107.42635,-12.11249 166.31581,-18.94736c33.72,-3.91364 72.77274,-9.80002 117.89474,-18.94736c43.30457,-8.7789 84.24072,-17.77075 114.73682,-25.26318c25.28864,-6.21304 46.24768,-11.82504 61.05261,-15.78946c12.57721,-3.36789 20.82556,-7.00482 29.47369,-9.47369c5.16119,-1.47342 8.42108,-3.1579 10.52631,-4.21051c0,0 1.05267,-1.05264 1.05267,-1.05264c0,-1.05264 0,-1.05264 0,-1.05264c0,0 -1.96661,-1.35638 -6.3158,-3.15787c-6.1507,-2.5477 -15.62738,-5.70569 -29.47369,-10.52634c-16.66425,-5.80173 -36.80994,-11.72244 -60,-16.8421c-29.43402,-6.49817 -58.87622,-13.03159 -87.36841,-17.89474c-33.60687,-5.73615 -71.47351,-10.66379 -124.21054,-14.73682c-57.80865,-4.46475 -107.40976,-5.26419 -161.05264,-3.1579c-93.90117,3.68704 -123.10847,10.94241 -156.84209,14.73685c-21.02505,2.36496 -43.16589,4.08969 -60,5.26315c-13.69141,0.95441 -26.371,1.20496 -33.68421,2.10526c-4.3076,0.5303 -7.36842,1.05264 -8.42105,1.05264c0,0 6.27795,-0.2598 12.63158,-1.05264c12.57781,-1.56955 29.53456,-3.77045 46.31579,-6.3158c29.60135,-4.4899 70.62046,-12.14865 104.21053,-18.94736c48.56717,-9.83011 108.38242,-22.30028 161.05261,-32.63159c54.69748,-10.72897 110.54245,-20.96106 152.63159,-28.42105c41.06857,-7.27911 88.30441,-16.56425 134.73685,-23.15788c42.01147,-5.96584 69.51617,-9.20258 90.52631,-12.63159c17.93396,-2.92696 29.6709,-4.45303 44.21051,-8.42105c9.63385,-2.62917 15.78949,-4.21053 18.94739,-5.26315c3.1579,-1.05263 6.47607,-1.29961 8.42108,-2.10527c1.37531,-0.56967 2.10522,-1.05263 2.10522,-1.05263c1.05267,0 1.05267,0 1.05267,-1.05263c0,0 0.21368,-0.27 -1.05267,-1.05263c-2.8316,-1.74998 -8.40222,-2.1819 -16.8421,-4.21053c-13.65491,-3.28214 -29.50305,-6.13522 -49.47369,-9.47369c-17.92249,-2.99609 -39.91547,-6.98205 -70.52631,-10.52631c-33.60736,-3.89122 -68.41064,-5.78943 -108.42102,-6.31579c-38.94403,-0.51234 -78.97839,-1.57645 -118.94739,1.05264c-40.03793,2.63362 -78.00519,7.71822 -113.6842,13.6842c-33.80194,5.65211 -56.82111,10.62737 -76.84212,14.73684c-15.77333,3.23759 -28.61824,5.50568 -43.1579,9.47369c-12.84509,3.50555 -23.10495,7.62267 -32.63158,9.47368c-6.28535,1.22124 -11.46034,3.5544 -17.89473,5.26315c-5.18759,1.37764 -10.56982,2.99709 -14.73685,4.21053c-3.19596,0.93066 -5.45896,1.78163 -7.36842,3.1579c-1.20766,0.87044 -2.10526,1.05264 -2.10526,2.10527c0,0 0,0 2.10526,0c4.21053,0 12.63499,1.00905 26.3158,2.10526c25.26973,2.0248 62.09164,3.68413 92.63158,4.21053c38.94157,0.6712 93.68422,0 153.68422,0c63.1579,0 126.3158,0 175.78949,0c43.1579,0 92.66412,-1.69666 136.8421,0c41.14355,1.58011 68.40784,5.39932 89.47363,7.36842c24.19647,2.26175 37.81665,4.73427 43.1579,5.26317c6.28503,0.62236 13.82428,0.59946 17.89478,2.10526c2.20752,0.81662 4.21051,1.05263 5.26312,2.10527c0,0 0,0 0,1.05263c0,0 -0.05634,0.56895 -2.10522,1.05263c-4.5816,1.08157 -12.56909,5.54742 -26.3158,8.42105c-16.77301,3.50626 -39.95691,7.68216 -69.47369,11.57895c-34.69006,4.57976 -88.36627,11.18073 -134.73682,14.73685c-33.65118,2.58067 -76.86859,6.07123 -116.84213,10.52631c-35.81454,3.99156 -63.24921,7.76091 -88.42105,11.57895c-29.60135,4.4899 -57.81622,9.90918 -80,13.6842c-20.98648,3.57126 -48.51996,6.65195 -66.3158,9.47369c-5.30115,0.84058 -14.76904,1.84756 -24.21053,3.1579c-6.34212,0.88019 -11.45111,1.57205 -14.73683,2.10526c-2.07808,0.33722 -2.41357,0.30832 -3.1579,1.05264c-0.74432,0.74432 -1.05263,0 -2.10527,0c0,0 0.02815,1.29446 1.05264,1.05261c2.29077,-0.54077 9.50072,-0.70483 25.26315,-2.10526c28.48378,-2.53067 69.37642,-7.57495 115.78947,-10.52631c57.81622,-3.67648 125.26315,-3.1579 192.63156,-3.1579c63.1579,0 106.37231,0.43506 144.21057,4.21054c45.34296,4.52429 69.48138,8.35623 87.36841,10.52631c25.27441,3.06635 49.44,7.56564 67.36841,10.52631c13.66022,2.2558 24.047,4.78622 30.52631,6.3158c7.24408,1.71011 10.8526,1.40793 13.6842,3.1579c1.26636,0.78262 2.10529,2.10526 2.10529,2.10526c0,0 -0.0072,0.879 -2.10529,1.05264c-6.3811,0.52811 -16.88361,2.71292 -30.52631,4.21051c-14.79755,1.62436 -32.58301,3.85803 -57.89471,5.26315c-37.85114,2.10123 -72.63159,2.10529 -102.10529,2.10529c-44.21051,0 -82.10529,0 -121.05261,0c-41.05267,0 -76.8421,0 -123.1579,0c-42.10529,0 -75.78949,0 -104.21054,0c-24.21051,0 -51.58249,-0.0788 -75.78946,1.05261c-21.05597,0.98413 -33.6875,1.85623 -43.15791,2.10529c-20.02075,0.52649 -26.30682,1.11728 -33.6842,2.10526c-8.4115,1.12643 -18.03944,1.28061 -26.3158,3.1579c-6.49249,1.47269 -12.63158,3.1579 -16.8421,4.21051c-4.21053,1.05264 -6.13025,1.56448 -8.42105,2.10529c-2.04893,0.4837 -2.42795,0.48294 -1.05263,1.05261c16.53259,6.84796 34.76591,0.62711 64.21053,-1.05261c53.76167,-3.06693 107.3307,-8.91211 158.94737,-12.63159c67.32529,-4.85144 136.83795,-8.47574 220,-14.73685c70.52283,-5.30954 112.61536,-7.74896 182.10529,-10.52631c61.04016,-2.43961 93.6842,-2.10526 135.78943,-2.10526c27.36841,0 50.54266,-0.78741 69.47369,0c12.66443,0.52676 23.16937,3.10196 28.42108,4.21051c9.49554,2.00439 11.57892,2.10526 12.63153,3.1579c1.05261,1.05264 2.10535,1.05264 2.10535,2.10526c0,0 -1.05994,0.879 -3.15796,1.05264c-6.3811,0.52811 -15.72913,3.52213 -27.36841,5.26315c-17.81989,2.66553 -46.3316,3.99255 -76.8421,6.3158c-50.55511,3.84952 -93.7334,7.90021 -141.05261,12.63156c-47.42352,4.74176 -80.24323,7.94394 -137.89478,17.89474c-42.31342,7.30341 -79.05298,15.32071 -122.10522,25.26315c-34.82642,8.04279 -75.88892,18.50003 -124.21054,29.47369c-40.08591,9.10336 -60.96066,14.08679 -83.1579,18.94736c-20.97266,4.59244 -34.73685,6.3158 -48.42105,8.42105c-13.68423,2.10529 -23.23668,2.65222 -31.57896,4.21054c-4.26631,0.79694 -7.36842,1.05264 -10.52631,1.05264c-3.1579,0 -5.26317,0 -6.3158,0c-1.05263,0 -1.05263,0 -1.05263,-1.05264c0,0 -0.15503,-0.18222 1.05263,-1.05264c1.90947,-1.37625 9.47368,-1.05261 21.05263,-1.05261c23.1579,0 55.79163,-0.41882 96.8421,0c51.58701,0.52634 109.46701,2.23959 171.57895,5.26315c45.25854,2.20316 83.1203,4.21024 127.36841,5.26315c26.30835,0.62604 48.42108,0 67.36847,0c6.31573,0 13.6842,0 24.21051,0c7.36841,0 10.68658,-0.24698 12.63159,-1.05264c1.37531,-0.56967 2.10522,-1.05261 2.10522,-1.05261c0,-1.05264 -3.18829,-0.88403 -9.47369,-2.10529c-9.52655,-1.85101 -23.21893,-4.98306 -43.1579,-9.47366c-26.40173,-5.94611 -57.98621,-13.32642 -91.57892,-22.10529c-34.83563,-9.10367 -67.35132,-16.93469 -124.21054,-27.36841c-23.151,-4.24823 -51.49445,-8.03467 -82.10526,-11.57895c-33.60739,-3.89124 -69.51633,-6.90533 -106.3158,-10.52631c-37.94469,-3.73364 -76.8875,-8.11252 -113.6842,-13.6842c-26.35014,-3.9899 -39.93135,-7.70779 -54.73684,-10.52634c-12.57989,-2.39487 -20.087,-4.94153 -28.42105,-7.36841c-6.39193,-1.86133 -10.52632,-4.21054 -12.63158,-5.26315c-2.10528,-1.05264 -3.1579,-2.10529 -4.21053,-3.1579c0,0 0,-1.05264 0,-1.05264c0,-1.05261 -0.74433,-1.36093 0,-2.10526c2.97729,-2.97729 11.56512,-2.33862 27.36842,-3.1579c28.4024,-1.47241 66.33524,-4.00195 112.63158,-8.42105c52.65475,-5.02603 110.6799,-11.83609 172.63159,-24.21054c64.38071,-12.85962 131.47931,-27.8763 200,-41.05261c68.32544,-13.13876 135.75464,-22.65742 214.73682,-27.36842c39.98431,-2.38492 74.73688,-3.1579 103.1579,-3.1579c23.1579,0 36.80273,-0.52567 47.36841,-1.05263c10.51331,-0.52435 16.76398,-0.52374 22.10529,-1.05264c2.09503,-0.20746 3.1579,0 3.1579,0c-1.05261,-1.05263 -5.17468,-3.53584 -17.89471,-6.31578c-16.74048,-3.65858 -47.18207,-10.56947 -87.36847,-16.8421c-40.89343,-6.383 -88.36255,-11.15865 -130.52631,-14.73685c-45.21063,-3.83678 -103.15887,-5.19527 -176.8421,-6.3158c-65.2641,-0.99249 -117.90479,-2.16212 -178.94736,-1.05263c-57.92343,1.05281 -103.16156,4.14758 -157.89473,7.36842c-52.63519,3.09738 -75.78947,4.21053 -92.63159,4.21053c-15.78947,0 -29.48413,-0.41948 -37.89473,0c-10.56568,0.52696 -16.8421,1.05263 -22.10526,1.05263c-3.1579,0 -5.26316,0 -6.31579,0c0,0 -1.05264,-1.05263 -1.05264,0c0,1.05263 1.05264,0 2.10526,0c0,0 0,0 0,0c1.05264,0 1.05264,0 1.05264,-1.05263c0,0 0,0 0,0c0,-1.05263 0,-1.05263 0,-1.05263c0,0 0,-1.05264 1.05263,-1.05264c0,0 0,0 0,-1.05263c0,0 0,0 1.05264,0c0,0 0,0 0,0c1.05263,0 2.11886,-0.88402 3.15789,-1.05263c3.28574,-0.5332 11.67736,-1.32014 23.1579,-3.1579c13.86731,-2.21982 32.63531,-5.24362 54.73684,-9.47368c27.37306,-5.23898 57.9962,-10.02298 90.52632,-16.8421c32.7415,-6.86345 58.96706,-12.53026 86.31578,-17.89474c31.60211,-6.19879 62.05783,-11.86129 86.3158,-15.78947c21.01443,-3.40295 45.23358,-7.6146 70.52631,-10.52631c19.97855,-2.29994 31.57336,-3.20997 41.05261,-4.21053c10.52045,-1.11046 17.89478,-1.05264 22.10529,-1.05264c5.26318,0 8.23553,-0.51185 10.52631,-1.05263c2.04895,-0.4837 2.10529,0 3.1579,0c0,0 1.05267,1.05263 1.05267,1.05263c0,0 0,0 -1.05267,0c-3.1579,0 -10.53375,-0.12653 -29.47369,1.05264c-30.53967,1.90134 -74.8757,6.479 -131.57892,15.78947c-64.38406,10.57164 -116.8421,21.05263 -153.68422,28.42106c-42.10526,8.42105 -98.12776,20.06509 -135.78947,29.47368c-19.07845,4.76614 -46.27254,12.80716 -71.57895,18.94737c-17.86507,4.33469 -30.49374,7.53841 -41.05263,9.47368c-6.298,1.15433 -12.53451,2.62761 -16.8421,3.1579c-3.13423,0.38583 -4.21053,1.05263 -5.26316,1.05263c0,0 0,0 0,0c1.05263,0 2.06013,-1.31096 7.36842,-2.10526c10.46234,-1.56552 25.26499,-2.07974 54.73684,-4.21054c43.16061,-3.1205 90.49478,-6.95988 148.42105,-9.47368c65.2357,-2.83099 135.78947,-5.26315 206.31578,-5.26315c54.73685,0 92.63159,0 137.89474,0c52.63159,0 102.11078,0.79713 156.8421,2.10526c36.84662,0.88066 47.36841,2.10527 61.05261,2.10527c13.68427,0 23.1579,0 32.63159,0c6.3158,0 9.47369,0 11.57898,0c2.10522,0 2.41357,-0.74435 3.1579,0c0.74432,0.74432 0,1.05263 1.05261,1.05263c0,0 0,0 0,0c0,0 -0.0061,-0.19623 -3.1579,0c-8.47021,0.52733 -23.2403,3.83646 -43.1579,8.42105c-29.60663,6.81479 -70.76959,16.95857 -121.05261,30.52632c-73.01007,19.70012 -140.86584,40.62331 -213.68423,62.10527c-73.50107,21.68338 -133.49252,37.6181 -183.15788,49.47366c-28.3187,6.75992 -59.8481,14.31696 -93.68422,22.10529c-19.91757,4.58456 -28.42105,6.3158 -37.89473,8.42105c-9.47369,2.10529 -14.87684,3.75739 -18.94737,5.26315c-2.20754,0.81662 -3.15789,1.05261 -3.15789,1.05261c1.05263,1.05264 3.15789,1.05264 6.31579,1.05264c6.31579,0 17.88811,0.11932 35.78947,1.05264c23.15036,1.20697 62.10551,2.09357 110.52631,3.1579c47.36867,1.0412 85.26317,1.05261 140.00002,1.05261c54.73685,0 91.57037,-0.52628 139.99997,-1.05261c36.8399,-0.40039 70.53357,-0.30408 109.47369,-1.05264c27.38361,-0.52643 49.47369,-1.05264 68.42108,-1.05264c13.6842,0 25.21399,0.5253 33.6842,1.05264c7.35419,0.45786 12.77161,0.59949 16.8421,2.10526c2.20758,0.81662 3.1579,1.05264 4.21051,2.10529c0,0 1.05261,0 1.05261,1.05261c0,0 -0.74432,0.30832 0,1.05264c0.74432,0.74435 1.05267,0 1.05267,0c0,0 0,1.05261 0,1.05261c-1.05267,0 -4.21051,0 -10.52631,0c-17.89478,0 -43.15961,0.2937 -68.42108,0c-45.27228,-0.52634 -95.76813,-2.45206 -144.21051,-5.26315c-62.08109,-3.60254 -123.14444,-5.64792 -177.89474,-7.36841c-43.14944,-1.35596 -83.1579,-1.05264 -131.57895,-1.05264c-35.78947,0 -65.28484,1.88202 -98.94736,5.26315c-29.49397,2.96243 -50.50864,6.47189 -68.42105,8.42105c-21.03348,2.28876 -34.68533,4.51279 -40,5.26318c-12.55087,1.77213 -16.92658,0.32706 -20,1.05261c-2.29079,0.5408 -4.21053,1.05264 -5.26316,1.05264c-1.05263,0 -1.05263,0 -1.05263,0c0,1.05261 1.05263,1.05261 3.1579,1.05261c4.21053,0 9.43453,1.172 22.10526,5.26318c16.79171,5.42178 31.74638,10.06485 64.21053,22.10526c32.80737,12.16769 72.98909,28.37268 129.47368,46.3158c37.48376,11.90726 88.1394,23.56802 133.6842,31.57895c29.32278,5.15762 70.40704,10.53659 112.63159,14.73682c28.35895,2.82095 50.5405,3.96872 70.52634,5.26318c13.69592,0.88705 29.47363,2.10526 42.10522,2.10526c11.57898,0 21.05267,0 29.47369,0c13.6842,0 20.01782,-0.95093 26.3158,-2.10526c5.27948,-0.96765 9.47369,-2.10529 13.6842,-3.1579c4.21051,-1.05264 8.29321,-1.57208 11.57898,-2.10529c4.15613,-0.67447 8.32397,-0.52234 12.63153,-1.05261c5.22375,-0.64307 9.47369,-1.05264 13.6842,-1.05264c3.1579,0 6.18799,-0.51941 9.47369,-1.05261c2.07813,-0.33722 4.21057,0 5.26318,0c0,0 0,0 1.05261,0c0,0 0,0 0,0l0,0
"""

val threeSvg = listOf(
    "m65.26316,324.73685c0,0 -1.05264,0 -1.05264,1.05261c0,1.05264 -1.20849,2.34567 0,5.26318c0.56969,1.37531 0.32712,3.24237 1.05264,6.31577c0.54078,2.2908 1.76804,4.23773 2.10526,6.3158c0.5332,3.28574 1.76804,5.29034 2.10526,7.36844c0.5332,3.28574 1.88404,5.34573 3.15789,8.42105c0.90074,2.17459 2.10526,5.26315 3.1579,8.42105c1.05263,3.1579 2.10526,5.26315 3.15789,8.42105c1.05264,3.1579 1.88406,6.39835 3.1579,9.47366c0.90075,2.17462 2.40904,5.12454 4.21053,9.47369c1.27385,3.07532 2.10526,6.3158 3.1579,9.47369c1.05263,3.1579 3.30978,7.29907 4.21053,9.47369c1.27383,3.07532 1.69542,6.48343 3.15789,9.47366c1.66747,3.40939 3.30979,6.24646 4.21053,8.42105c1.27385,3.07532 2.10526,6.3158 3.15789,9.47369c1.05264,3.1579 2.94099,6.40784 5.26316,11.57895c0.96423,2.14719 2.62469,4.08267 3.15789,7.36841c0.33723,2.07809 1.20452,5.19385 2.10526,7.36844c1.27383,3.07535 2.93669,6.39835 4.21053,9.47366c0.90075,2.17462 2.61712,5.07767 3.1579,7.36844c0.48369,2.04895 1.05264,5.26315 2.10526,7.36841c1.05264,2.10529 0.71049,4.86319 4.21053,10.52634c0.78262,1.2663 2.10527,3.15787 3.1579,5.26315c1.05263,2.10526 1.62157,4.26688 2.10526,6.31577c0.54079,2.29083 2.61711,4.02502 3.1579,6.3158c0.4837,2.04895 1.53558,3.88782 2.10527,5.26318c0.80562,1.94501 0.24701,3.31812 1.05263,5.26312c0.56967,1.37537 1.53558,1.78259 2.10527,3.1579c0.40285,0.97253 0.81078,3.18604 1.05263,4.21057c0.54079,2.29077 1.29958,2.2655 2.10526,4.21051c0.56969,1.37531 1.05263,2.10522 2.10527,3.1579c1.05261,1.05261 0.72897,2.30103 2.10526,4.21051c0.87042,1.20764 1.5356,1.78259 2.10527,3.1579c0.40282,0.97247 1.05263,2.10529 1.05263,3.1579c0,0 0.3083,0.30829 1.05263,1.05261c0.74435,0.74432 0.30832,0.30835 1.05264,1.05267c0.74431,0.74432 0,1.05261 0,1.05261l0,1.05261l0,0l0,0",
    "m1.05263,362.63159c0,0 0,0 0,0c2.10526,0 4.10824,-0.23599 6.31579,-1.05264c4.07052,-1.5058 9.52811,-3.00687 12.63158,-4.21054c9.66568,-3.74884 14.73684,-5.26315 18.94737,-7.36841c4.21053,-2.10526 8.56105,-3.75739 12.63158,-5.26315c4.4151,-1.63324 6.31578,-3.1579 8.42105,-4.21054c2.10526,-1.05261 4.21053,-3.1579 6.31579,-4.21051c2.10527,-1.05264 4.95313,-3.52231 7.36842,-5.26315c1.90947,-1.37628 5.48596,-2.85699 8.42105,-5.26318c2.30246,-1.88757 5.45895,-3.88687 7.36842,-5.26315c2.4153,-1.74084 5.65475,-3.56323 9.47368,-6.31577c2.41532,-1.74088 5.26317,-4.21054 7.36842,-6.3158c2.10527,-2.10529 5.45896,-3.8869 7.36842,-5.26315c2.41532,-1.74088 4.21052,-3.1579 5.26315,-4.21054c2.10526,-2.10526 3.3537,-2.83426 5.26316,-4.21051c1.20766,-0.87042 2.10526,-1.05264 3.1579,-2.10529c1.05263,-1.05261 1.78255,-1.53558 3.1579,-2.10526c0.9725,-0.40283 1.05263,-1.05264 2.10526,-2.10526c1.05264,-1.05264 2.10527,-2.10529 3.1579,-3.1579c1.05264,-1.05264 2.30106,-1.78162 4.21053,-3.1579c2.4153,-1.74084 3.1579,-4.21054 4.21053,-5.26315c1.05264,-1.05264 3.07117,-1.45987 4.21053,-4.21054c0.40282,-0.9725 1.36095,-1.36093 2.10527,-2.10526c0.74432,-0.74432 1.05263,-1.05264 1.05263,-1.05264l0,0l0,0",
    "m132.63158,305.78946c0,0 0,1.05264 0,2.10529c0,2.10526 0,3.1579 0,5.26315c0,3.1579 0.13751,5.39865 1.05263,8.42105c1.09982,3.63248 3.27986,6.27774 4.21053,9.47369c1.21344,4.16702 2.22723,7.33035 3.1579,10.52631c1.21344,4.16702 3.46169,7.22977 5.26317,11.57895c1.27385,3.07535 2.45471,7.60983 4.21053,11.57895c1.5354,3.47086 2.94098,7.46045 5.26315,12.63156c1.92847,4.2944 4.21053,8.42105 6.3158,12.63159c2.10526,4.21054 2.78825,8.62714 5.26315,12.63159c2.767,4.47711 5.0056,8.56 7.36842,12.63156c1.90497,3.28259 4.41081,7.24371 6.31578,10.52631c2.36284,4.07159 3.51315,7.69476 5.26317,10.52634c1.56525,2.53262 4.66618,6.10782 7.36841,12.63156c1.27385,3.07535 3.72775,6.00281 5.26317,9.47369c1.75581,3.96912 2.90033,7.50735 5.26315,11.57895c1.90497,3.28262 4.05385,5.77402 6.3158,10.52631c1.86526,3.91885 3.35817,7.24371 5.26315,10.52634c1.18141,2.03577 2.64526,3.78314 4.21053,6.31577c1.75002,2.83157 2.10527,5.26318 3.1579,7.36844c1.05263,2.10526 1.78163,3.3537 3.1579,5.26315c0.87042,1.20767 2.10524,3.1579 3.15788,5.26318c1.05263,2.10522 1.23485,4.05548 2.10527,5.26312c1.37628,1.90948 2.61711,2.97235 3.1579,5.26318c0.48369,2.04889 1.53558,2.83521 2.10526,4.21051c0.80566,1.94501 1.53558,2.83521 2.10527,4.21051c0.40285,0.97253 0.48296,2.83521 1.05263,4.21057c0.4028,0.97247 1.05263,3.15784 1.05263,3.15784c0,1.05267 1.05264,2.10529 1.05264,3.1579c0,1.05267 1.05263,2.10529 1.05263,3.1579c0,1.05267 0,1.05267 0,1.05267c0,1.05261 0,1.05261 0,1.05261c0,0 0,0 0,0c-1.05263,0 -1.05263,0 -1.05263,0c-1.05264,0 -1.05264,0 -1.05264,0c0,-1.05261 0,-1.05261 -1.05263,-1.05261c0,0 0,-1.05267 0,-1.05267c0,0 0,0 -1.05263,-1.05261c0,0 0.74431,-0.30829 0,-1.05261c-0.74432,-0.74432 -1.05264,-1.05267 -1.05264,-1.05267c-1.05263,-1.05261 -1.05263,-1.05261 -2.10526,-2.10522c0,0 -1.23483,-0.89764 -2.10527,-2.10529c-1.37627,-1.90942 -1.41704,-2.84784 -3.15788,-5.26312c-1.37628,-1.90948 -2.46968,-2.84784 -4.21053,-5.26318c-1.37627,-1.90948 -1.78163,-4.40631 -3.1579,-6.3158c-1.74086,-2.41534 -4.12381,-3.56512 -5.26317,-6.3158c-0.80563,-1.94495 -1.05264,-3.1579 -2.10526,-5.26312c-1.05264,-2.10529 -3.1579,-4.21054 -4.21053,-6.31583c-1.05263,-2.10526 -1.05264,-4.21051 -2.10527,-6.31577c-1.05264,-2.10529 -1.53558,-3.88785 -2.10526,-5.26315c-0.40283,-0.9725 -0.48296,-2.83521 -1.05263,-4.21054c-0.80563,-1.94501 -1.05264,-3.1579 -1.05264,-4.21054c0,-2.10526 0,-3.15787 0,-5.26315c0,-1.05261 -0.48296,-1.78256 -1.05263,-3.1579c-0.80563,-1.94501 0,-3.15787 0,-4.21051c0,-2.10526 0,-3.1579 0,-5.26315c0,-1.05264 0,-3.1579 0,-5.26315c0,-2.10529 0.51184,-5.07767 1.05263,-7.36844c0.48369,-2.04895 1.05264,-4.21051 1.05264,-7.36841c0,-1.05264 0.81079,-4.23871 1.05263,-5.26315c0.54079,-2.2908 1.53558,-2.83521 2.10526,-4.21054c0.80563,-1.94501 1.56448,-2.97238 2.10527,-5.26315c0.24185,-1.02448 0.72897,-2.30106 2.10526,-4.21054c0.87042,-1.20764 2.54617,-2.54617 4.21053,-4.21051c1.66437,-1.66434 2.10526,-3.1579 3.1579,-4.21054c1.05263,-1.05261 2.18539,-2.75507 3.1579,-3.1579c1.37532,-0.56967 1.78256,-1.53555 3.1579,-2.10526c0.9725,-0.40283 1.78256,-0.48294 3.1579,-1.05261c0.9725,-0.4028 2.18538,0.40283 3.15788,0c1.37535,-0.56967 2.10527,-1.05264 3.1579,-1.05264c2.10527,0 3.1579,0 4.21053,0c2.10527,0 3.1579,0 5.26317,0c1.05263,0 2.10526,1.05264 3.15788,1.05264c1.05264,0 2.18539,0.64978 3.1579,1.05261c1.37534,0.5697 1.91974,2.6171 4.21053,3.1579c1.02448,0.24185 2.54617,0.44089 4.21054,2.10526c1.66437,1.66437 2.10526,3.1579 3.1579,4.21054c1.05261,1.05261 2.10526,2.10526 4.21051,4.21051c1.05264,1.05264 1.78162,2.30109 3.1579,4.21054c0.87045,1.20767 1.78165,2.30106 3.1579,4.21051c1.74084,2.41531 2.10526,3.1579 3.1579,4.21054c1.05261,1.05264 1.05261,2.10526 2.10526,3.1579c1.05264,1.05261 0.729,2.30106 2.10526,4.21051c0.87042,1.20767 1.56448,1.91974 2.10529,4.21054c0.24185,1.02448 1.56445,1.91971 2.10526,4.21051c0.24185,1.02448 0.24695,3.31815 1.05261,5.26318c0.5697,1.37531 1.53561,2.83517 2.10529,4.21051c0.80563,1.94501 0.24698,3.31815 1.05261,5.26315c0.56967,1.37534 1.56448,2.97235 2.10529,5.26315c0.24185,1.02448 0.24695,3.31815 1.05261,5.26318c0.5697,1.37531 1.53558,2.83517 2.10526,4.21051c0.80563,1.94501 0.56894,3.2142 1.05264,5.26315c0.5408,2.2908 1.53558,2.83521 2.10526,4.21054c0.80563,1.94501 0.64981,3.23804 1.05264,4.21051c0.56967,1.37534 1.70242,3.23804 2.10526,4.21054c0.5697,1.37531 1.53561,1.78256 2.10529,3.1579c0.40283,0.97247 0.64978,2.18539 1.05261,3.1579c0.56967,1.37534 0.64984,2.18539 1.05264,3.15787c0.56967,1.37537 1.53555,1.78259 2.10526,3.1579c0.40286,0.97253 0.30832,1.36096 1.05264,2.10529c0.74432,0.74432 0,1.05261 0,2.10522c0,0 1.05261,0 1.05261,0c0,0 0,1.05267 0,1.05267l0,0l-2.10526,2.10522",
    "m289.47369,397.36841c0,0 0.48294,0.72995 1.05261,2.10529c0.4028,0.9725 0.18219,0.89758 1.05264,2.10526c1.37628,1.90945 2.58823,3.88782 3.1579,5.26315c0.40283,0.9725 1.53558,2.83521 2.10526,4.21054c0.80563,1.94501 0.35526,3.48422 2.10526,6.31577c1.56528,2.53265 3.52231,4.95313 5.26318,7.36844c1.37625,1.90945 2.46048,5.58948 4.21051,8.42105c1.56525,2.53262 4.08176,5.33264 5.26315,7.36841c1.90497,3.28262 4.42822,6.11859 6.3158,8.42105c2.40619,2.93509 3.52231,4.95316 5.26315,7.36844c1.37628,1.90945 2.46051,4.53683 4.21054,7.36841c1.56525,2.53262 4.21051,5.26315 6.31577,8.42105c2.10529,3.1579 3.52231,4.95309 5.26318,7.36844c1.37625,1.90945 3.37558,5.06595 5.26315,7.36841c2.40619,2.93509 2.83423,5.45895 4.21051,7.36844c1.74084,2.41531 3.34012,4.05548 4.21054,5.26315c1.37625,1.90945 3.11069,2.68332 4.21051,6.31577c0.30505,1.00748 1.56448,1.91974 2.10529,4.21054c0.24185,1.02448 0.64978,2.18542 1.05261,3.1579c0.5697,1.37531 0.64981,2.18542 1.05264,3.1579c0.5697,1.37531 1.05264,2.10529 1.05264,2.10529c1.05261,1.05261 1.05261,1.05261 1.05261,2.10522c0,0 0,0 0,1.05261c0,0 0,0 0,0c0,0 -1.05261,0 -1.05261,0c0,0 -1.05264,0 -1.05264,0c-1.05264,0 -1.05264,0 -1.05264,-1.05261c0,0 -1.05261,-1.05261 -1.05261,-1.05261c0,0 -1.05264,-1.05261 -1.05264,-1.05261c0,0 0,-1.05267 0,-1.05267c-1.05264,0 -1.13275,-0.64978 -2.10526,-1.05261c-1.37534,-0.56964 -1.05264,-1.05261 -2.10529,-2.10529c0,0 -1.05261,-1.05261 -2.10526,-2.10522c-1.05264,-1.05264 -3.15787,-2.10529 -4.21051,-3.15793c-1.05264,-1.05264 -3.00287,-2.28748 -4.21054,-3.1579c-1.90945,-1.37625 -3.64084,-1.78256 -4.21051,-3.15787c-0.40283,-0.9725 -1.05264,-1.05264 -2.10529,-2.10529c0,0 -0.30829,-1.36093 -1.05261,-2.10526c-0.74432,-0.74432 -1.53558,-0.72995 -2.10529,-2.10526c-0.40283,-0.9725 -0.64978,-2.18539 -1.05261,-3.1579c-0.56967,-1.37534 -1.53558,-1.78256 -2.10526,-3.1579c-0.40283,-0.9725 -0.48297,-2.83521 -1.05264,-4.21054c-0.40283,-0.97247 -0.88403,-3.17145 -1.05264,-4.21051c-0.5332,-3.28574 -1.56445,-4.02499 -2.10526,-6.3158c-0.24185,-1.02444 -1.05264,-3.1579 -1.05264,-5.26315c0,-2.10526 -1.05261,-4.21054 -1.05261,-6.3158c0,-2.10526 -1.05264,-4.21051 -1.05264,-6.3158c0,-2.10526 0.24185,-4.23868 0,-5.26315c-0.54077,-2.29077 -0.24695,-4.37076 -1.05261,-6.3158c-0.5697,-1.37531 -1.05264,-3.15787 -1.05264,-5.26315c0,-1.05261 -0.51184,-1.91971 -1.05264,-4.21051c-0.24185,-1.02448 0,-2.10526 0,-3.1579c0,-1.05264 -0.48294,-1.78256 -1.05261,-3.1579c-0.40283,-0.9725 0,-2.10526 0,-3.1579c0,-1.05264 0.40283,-2.18539 0,-3.1579c-0.5697,-1.37531 -1.05264,-2.10526 -1.05264,-3.1579c0,-1.05261 0,-2.10526 0,-2.10526c0,-2.10526 0,-3.1579 0,-4.21051c0,-1.05264 0,-2.10529 0,-3.1579c0,-1.05264 0,-2.10529 0,-3.1579c0,-1.05264 0,-2.10529 0,-3.1579c0,-1.05264 0.51184,-1.91974 1.05264,-4.21054c0.24185,-1.02444 0.48294,-1.78256 1.05261,-3.1579c0.4028,-0.9725 0.48294,-1.78256 1.05264,-3.15787c0.40283,-0.9725 0.48294,-1.78259 1.05264,-3.1579c0.40283,-0.9725 0.30829,-2.41357 1.05261,-3.1579c0.74432,-0.74432 1.53558,-0.72995 2.10526,-2.10529c0.4028,-0.9725 0.64981,-1.13275 1.05264,-2.10526c0.5697,-1.37531 0.72995,-1.53555 2.10526,-2.10526c0.9725,-0.40283 2.10529,-1.05264 2.10529,-1.05264c1.05261,-1.05261 2.10526,-1.05261 3.15787,-2.10526c1.05264,-1.05264 2.10529,-1.05264 2.10529,-1.05264c1.05261,-1.05261 2.10526,-1.05261 3.1579,-1.05261c1.05261,0 2.10526,-1.05264 3.1579,-1.05264c1.05261,0 2.18539,-0.64978 3.15787,-1.05261c1.37534,-0.56967 2.83521,-1.53561 4.21054,-2.10529c0.9725,-0.40283 2.18539,-0.64978 3.1579,-1.05261c1.37531,-0.5697 2.10526,-1.05264 3.1579,-2.10529c0,0 0.72992,-1.53558 2.10526,-2.10526c0.9725,-0.40283 2.10526,-1.05264 3.1579,-2.10526c1.05264,-1.05264 2.83423,-2.30106 4.21051,-4.21054c0.87042,-1.20764 3.1579,-2.10526 4.21054,-3.1579c1.05264,-1.05261 2.30106,-1.78162 4.21051,-3.15787c1.20767,-0.87042 1.95026,-2.28748 3.1579,-3.1579c1.90948,-1.37628 3.1579,-2.10529 4.21054,-3.1579c1.05264,-1.05264 1.05264,-1.05264 2.10526,-1.05264l0,-1.05264l0,0",
    "m420,404.73685c0,0 1.05264,0 2.10526,0c2.10529,0 3.1579,0 5.26315,0c1.05264,0 2.83521,-0.48297 4.21054,-1.05264c1.94501,-0.80563 5.07761,-1.56445 7.36841,-2.10526c1.02448,-0.24185 3.1579,-1.05261 5.26318,-2.10526c2.10526,-1.05261 4.21051,-1.05267 6.31577,-2.10529c2.10529,-1.05264 2.97238,-2.6171 5.26315,-3.15787c2.04898,-0.4837 3.08856,-1.20453 5.26318,-2.10529c3.07532,-1.27383 4.40631,-2.83426 6.31577,-4.21051c1.20767,-0.87042 3.1579,-2.10526 5.26318,-3.1579c2.10526,-1.05261 3.35367,-1.78162 5.26315,-3.1579c1.20764,-0.87042 3.00287,-1.23483 4.21051,-2.10526c1.90948,-1.37628 3.0029,-2.28748 4.21054,-3.1579c1.90948,-1.37625 3.23804,-1.70242 4.21051,-2.10526c1.37534,-0.56967 2.10529,-2.10529 2.10529,-2.10529c1.05261,-1.05261 1.05261,-1.05261 2.10526,-2.10526c0,0 1.05261,0 1.05261,0c0,0 1.05264,-1.05264 1.05264,-1.05264c0,0 0,0 0,0c0,0 0,-1.05261 0,-1.05261c-1.05264,-1.05264 -2.37527,-1.8916 -3.1579,-3.1579c-1.75003,-2.83157 -3.20706,-5.22672 -6.3158,-9.47369c-5.34845,-7.30673 -6.53857,-9.17276 -9.47366,-11.57895c-2.30249,-1.88757 -4.21051,-4.21054 -6.3158,-6.3158c-1.05264,-1.05261 -2.18539,-1.70242 -3.1579,-2.10526c-1.37534,-0.56967 -2.10526,-1.05261 -3.1579,-1.05261c-1.05261,0 -1.05261,0 -2.10526,0c-1.05264,0 -1.05264,0 -2.10526,0c-1.05264,0 -1.05264,0 -2.10529,0c0,0 -1.05261,0 -2.10526,0c0,0 -1.05264,0 -2.10526,1.05261c0,0 -0.72995,0.48294 -2.10526,1.05264c-0.9725,0.40283 -1.13278,0.64978 -2.10529,1.05261c-1.37531,0.5697 -2.10526,1.05264 -3.1579,2.10529c-1.05261,1.05261 -1.36093,1.36093 -2.10526,2.10526c-0.74432,0.74432 -2.10526,1.05264 -4.21051,2.10526c0,0 -1.36096,0.30832 -2.10529,1.05264c-0.74432,0.74432 -1.53558,0.72992 -2.10526,2.10526c-0.40283,0.9725 -1.05264,1.05264 -2.10526,2.10526c0,0 -1.05264,1.05264 -2.10526,2.10529c0,0 -0.30832,1.36093 -1.05264,2.10526c-0.74432,0.74432 -1.05264,1.05264 -2.10526,2.10526c0,0 0,1.05264 -1.05264,2.10526c0,0 -1.05264,1.05264 -1.05264,2.10529c0,0 -0.64978,1.13275 -1.05261,2.10526c-0.56967,1.37534 -1.05264,1.05264 -1.05264,2.10526c0,1.05264 -0.48294,0.72995 -1.05261,2.10526c-0.40283,0.9725 -0.30832,1.36096 -1.05264,2.10529c-0.74432,0.74432 0.40283,2.18539 0,3.1579c-0.5697,1.37531 -1.05264,2.10526 -1.05264,3.1579c0,0 0.40283,1.13275 0,2.10526c-0.56967,1.37531 -1.05261,2.10526 -1.05261,3.1579c0,0 0,1.05261 0,2.10526c0,1.05264 0,2.10526 0,3.1579c0,1.05261 0,2.10526 0,3.1579c0,1.05261 0,2.10526 0,3.1579c0,1.05261 0,1.05261 0,2.10526c0,1.05264 0.48294,1.78256 1.05261,3.1579c0.4028,0.9725 0.51184,1.91971 1.05264,4.21051c0.24185,1.02448 0.24701,2.26553 1.05264,4.21054c0.56967,1.37531 1.29962,3.31815 2.10526,5.26315c0.56967,1.37534 1.8634,3.18607 2.10526,4.21054c0.5408,2.2908 1.78162,3.35367 3.1579,5.26315c0.87042,1.20764 2.10526,4.21051 3.1579,5.26315c2.10526,2.10526 3.1579,3.1579 4.21051,5.26315c1.05264,2.10526 3.1579,3.1579 4.21054,5.26315c1.05264,2.10526 3.00287,3.34012 4.21051,4.21054c1.90948,1.37628 3.3537,2.83423 5.26318,4.21051c1.20764,0.87042 3.00284,2.28745 4.21051,3.1579c1.90945,1.37628 4.29068,1.70242 5.26315,2.10526c1.37534,0.56967 3.23804,1.70245 4.21054,2.10529c1.37531,0.56967 2.16156,1.62155 4.21051,2.10526c2.2908,0.5408 2.97238,1.56448 5.26315,2.10526c2.04898,0.4837 4.26685,0.56897 6.3158,1.05264c2.2908,0.54077 4.21054,1.05261 5.26315,1.05261c2.10529,0 4.21054,0 6.3158,0c2.10526,0 3.1579,0 5.26315,0c2.10529,0 5.29135,-0.81076 6.3158,-1.05261c2.2908,-0.5408 3.3537,-0.729 5.26315,-2.10526c2.41534,-1.74088 4.40631,-2.83426 6.3158,-4.21054c2.41534,-1.74084 4.40631,-2.83426 6.3158,-4.21054c1.20764,-0.87042 3.1579,-2.10526 4.21051,-3.15787c1.05267,-1.05264 2.10529,-2.10529 3.1579,-3.1579c1.05261,-1.05264 3.1579,-3.15793 4.21051,-4.21054c1.05267,-1.05264 2.10529,-2.10529 3.1579,-3.1579c1.05267,-1.05264 3.64087,-1.78253 4.21057,-3.1579c0.40283,-0.97247 1.05261,-1.05261 1.05261,-1.05261l1.05261,-1.05264l0,0l-1.05261,0",
    "m531.57892,352.10526c0,0 0,0 1.05267,0c0,0 1.05261,0 2.10522,0c2.10529,0 3.31818,0.80566 5.26318,0c1.37531,-0.56967 1.91974,-1.56445 4.21051,-2.10526c2.04895,-0.4837 3.3537,-0.72897 5.26318,-2.10526c1.20764,-0.87042 2.83521,-2.58823 4.21051,-3.1579c0.97247,-0.40283 1.91974,-1.56448 4.21051,-2.10526c1.02454,-0.24185 1.13281,-0.64981 2.10529,-1.05264c1.37531,-0.5697 2.18542,-1.70242 3.1579,-2.10526c1.37531,-0.5697 3.1579,-2.10529 4.21051,-3.1579c1.05267,-1.05264 3.3537,-1.78162 5.26318,-3.1579c2.41528,-1.74084 4.11194,-4.3194 5.26312,-5.26315c2.93506,-2.40622 4.40637,-2.83429 6.3158,-4.21054c2.41528,-1.74088 3.3537,-2.83423 5.26318,-4.21051c2.41528,-1.74084 2.41357,-2.41357 3.1579,-3.1579c0.74432,-0.74432 2.41357,-0.30829 3.1579,-1.05264c0.74432,-0.74432 1.05261,-1.05261 1.05261,-1.05261c0,0 0.30829,0.74432 1.05261,0c0.74432,-0.74432 0,-1.05264 0,-1.05264c1.05267,0 0.30835,-0.30832 1.05267,-1.05264c0.74432,-0.74432 1.05261,0 2.10522,-1.05261c0,0 1.05267,0 1.05267,0c0,-1.05264 1.05261,-1.05264 1.05261,-1.05264c0,0 1.05261,0 1.05261,0c0,0 0,-1.05264 0,-1.05264c-2.10522,-1.05261 -2.18536,-1.70239 -3.1579,-2.10526c-1.37531,-0.5697 -1.70239,-2.18539 -2.10522,-3.1579c-0.5697,-1.37534 -2.10529,-1.05261 -3.1579,-2.10526c-1.05267,-1.05267 -1.78259,-1.53558 -3.1579,-2.10526c-0.97253,-0.40283 -1.91974,-1.56448 -4.21051,-2.10529c-1.02454,-0.24185 -3.23804,-0.64975 -4.21057,-1.05261c-1.37531,-0.5697 -2.13336,-0.81079 -3.1579,-1.05264c-2.29077,-0.54077 -3.1579,-1.05261 -4.21051,-1.05261c-1.05261,0 -2.10529,-1.05264 -3.1579,-1.05264c-1.05261,0 -2.10529,0 -4.21051,0c0,0 -1.05261,0 -2.10529,0c-1.05261,0 -2.10522,0 -2.10522,0c-1.05267,-1.05264 -2.10529,-1.05264 -3.1579,-1.05264c0,0 -1.05267,0 -2.10529,0c-1.05261,0 -1.05261,0 -2.10529,0c-1.05261,0 -2.10522,0 -3.1579,0c0,0 -1.05261,0 -2.10522,0c-1.05267,0 -2.10529,0 -3.1579,0c-1.05261,0 -2.10529,0 -3.1579,0c-1.05261,0 -2.10529,0 -2.10529,0c-2.10522,0 -2.83521,0.48294 -4.21051,1.05264c-0.97247,0.40283 -2.18542,0.64981 -3.1579,1.05264c-1.37531,0.56967 -2.10529,1.05261 -3.1579,2.10526c0,0 -1.36096,0.30826 -2.10529,1.05261c-0.74432,0.74432 -1.05261,1.05264 -2.10522,2.10529c0,0 -1.05261,1.05261 -1.05261,1.05261c-1.05267,1.05264 -0.30835,1.36096 -1.05267,2.10529c-0.74432,0.74432 -0.30829,1.36093 -1.05261,2.10526c-0.74432,0.74432 -1.05261,1.05261 -1.05261,1.05261c0,1.05264 -1.05267,1.05264 -1.05267,2.10529c0,0 0,1.05261 0,1.05261c0,1.05264 0,2.10529 0,2.10529c0,1.05261 0,2.10526 0,2.10526c0,1.05264 0,2.10526 0,3.1579c0,1.05261 0,2.10526 0,3.1579c0,1.05261 0,2.10526 0,3.1579c0,1.05261 0,2.10526 0,3.15787c0,0 0,1.05264 0,3.1579c0,0 0,1.05264 0,2.10529c0,1.05261 0.48297,1.78253 1.05267,3.1579c0.40283,0.97247 -0.24182,2.13342 0,3.15787c0.54077,2.2908 1.05261,3.1579 1.05261,4.21054c0,1.05264 1.05261,3.1579 1.05261,4.21051c0,1.05264 0.48297,1.78256 1.05267,3.1579c0.80566,1.94501 0.48297,2.83521 1.05261,4.21054c0.40283,0.9725 0.48297,1.78256 1.05261,3.1579c0.40283,0.9725 0.48297,1.78256 1.05261,3.1579c0.40283,0.9725 1.53564,1.78256 2.10529,3.1579c0.40283,0.9725 1.53558,1.78253 2.10529,3.15787c0.40283,0.9725 0.64978,2.18539 1.05261,3.1579c0.56964,1.37534 2.10529,2.10529 3.1579,3.1579c1.05261,1.05264 2.18542,2.75507 3.1579,3.1579c1.37531,0.5697 1.05261,2.10522 2.10529,3.1579c1.05261,1.05264 1.70239,1.13278 2.10522,2.10526c0.5697,1.37537 2.10529,1.05264 3.1579,2.10529c0,0 0.72992,1.53558 2.10529,2.10526c0.97247,0.4028 1.13275,0.64981 2.10522,1.05261c1.37537,0.56967 0.72998,1.53558 2.10529,2.10529c0.97247,0.40283 2.10529,0 2.10529,1.05261c0,0 1.3609,-0.74432 2.10522,0c0.74432,0.74432 0.08014,0.64978 1.05267,1.05264c1.37531,0.5697 1.05261,1.05264 2.10522,1.05264c0,0 1.05267,0 1.05267,0c1.05261,1.05261 1.05261,1.05261 2.10522,1.05261c1.05267,0 2.10529,0 2.10529,0c1.05261,1.05264 3.1579,1.05264 3.1579,1.05264c1.05261,0 1.78253,0.48297 3.1579,1.05264c0.97247,0.4028 2.10522,0 2.10522,0c1.05267,0 2.10529,0 3.1579,0c1.05267,0 1.13281,-0.40283 2.10529,0c1.37531,0.56967 2.10529,1.05261 2.10529,1.05261c1.05261,0 2.10522,0 2.10522,0c1.05267,0 2.10529,0 2.10529,0c1.05261,0 1.05261,0 2.10522,0c0,0 1.05267,0 2.10529,0c0,0 1.05261,0 2.10529,0c0,0 1.05261,0 2.10522,0c0,0 1.05267,0 1.05267,0c1.05261,0 1.3609,-0.30829 2.10522,-1.05261c0.74432,-0.74435 2.10529,0 2.10529,0c1.05261,-1.05264 1.05261,-1.05264 2.10529,-1.05264c1.05261,0 2.18536,-0.64981 3.1579,-1.05264c1.37531,-0.56967 1.13275,-0.64978 2.10522,-1.05261c1.37531,-0.5697 1.78259,-1.53558 3.1579,-2.10529c0.97247,-0.40283 1.91974,-1.56445 4.21051,-2.10526c1.02454,-0.24185 1.95026,-1.23483 3.1579,-2.10526c1.90948,-1.37628 2.83521,-2.58823 4.21057,-3.1579c0.97247,-0.4028 2.5882,-0.72992 3.1579,-2.10526c0.40283,-0.9725 1.13275,-1.70245 2.10522,-2.10529c1.37531,-0.56967 1.13275,-1.70242 2.10529,-2.10526c1.37531,-0.56967 1.3609,-0.30829 2.10522,-1.05261c0.74432,-0.74432 0,-1.05264 1.05267,-2.10529c0,0 0.30829,-1.36093 1.05261,-2.10526c0.74432,-0.74432 1.13275,-1.70239 2.10529,-2.10526c1.37531,-0.5697 1.70239,-3.23804 2.10522,-4.21054c0.5697,-1.37534 1.36096,-1.36093 2.10529,-2.10526c0.74432,-0.74432 1.05261,-1.05264 1.05261,-2.10526c0,0 1.05267,0 1.05267,-1.05264c0,0 0,0 0,-1.05264l0,0",
)

val plusOneSvg = listOf(
    "m580,144.73685c0,0 0,1.05263 0,1.05263c0,1.05263 0.81079,3.18607 1.05261,4.21053c0.54083,2.29082 2.61713,4.02501 3.1579,6.3158c0.24182,1.02448 0.92389,3.22737 2.10529,5.26315c1.90497,3.28262 3.69788,5.88843 5.26312,8.42105c1.75,2.83159 3.1579,7.36842 5.26318,10.52632c2.10529,3.15788 4.64832,6.06427 6.3158,9.47368c1.46246,2.99023 3.1579,6.31578 5.26318,9.47368c2.10522,3.15788 4.21051,6.3158 5.26312,8.42105c1.05261,2.10527 3.1579,4.21053 5.26318,8.42107c1.05261,2.10526 2.46967,3.90047 4.21051,6.31578c1.37628,1.90947 2.46967,3.90051 4.21051,6.3158c1.37628,1.90947 2.10529,4.21053 3.1579,5.26315c2.10529,2.10529 2.35229,3.31815 3.1579,5.26315c0.56964,1.37534 2.58826,1.78258 3.1579,3.1579c0.40283,0.9725 0.64978,1.13277 1.05261,2.10527c0.5697,1.37535 0.30835,1.36093 1.05267,2.10526c0.74432,0.74431 1.05261,1.05263 1.05261,1.05263c1.05261,1.05264 0.30829,1.36095 1.05261,2.10527c0.74432,0.74435 1.05267,0 1.05267,1.05263l0,0l0,0",
    "m537.89471,226.8421c2.10529,-1.05263 4.29315,-1.88403 7.36847,-3.1579c2.17456,-0.90074 6.31573,-4.21051 10.52631,-6.31578c4.21051,-2.10526 8.42102,-5.26314 12.63159,-7.36842c2.10522,-1.05261 4.01331,-2.32297 6.31573,-4.21053c2.93506,-2.4062 5.26318,-3.15788 7.36847,-4.21053c2.10522,-1.05261 4.21051,-3.15788 6.3158,-4.21053c2.10522,-1.05261 4.27997,-1.9765 6.31573,-3.1579c3.28259,-1.90498 5.10815,-2.28748 6.3158,-3.1579c1.90948,-1.37628 4.21057,-2.10527 6.3158,-3.1579c2.10529,-1.05264 3.1579,-2.10524 5.26318,-3.15788c2.10522,-1.05263 4.40631,-2.83424 6.3158,-4.21053c1.20764,-0.87042 3.59875,-1.49358 5.26312,-3.1579c1.66437,-1.66437 3.3537,-2.83424 5.26318,-4.21053c2.41528,-1.74084 3.3537,-2.83429 5.26312,-4.21053c1.2077,-0.87044 3.1579,-2.10526 4.21057,-3.1579c1.05261,-1.05261 2.10522,-2.10526 3.1579,-3.1579c1.05261,-1.05261 2.18536,-1.70241 3.1579,-2.10526c1.37531,-0.56969 2.10522,-2.10527 2.10522,-2.10527c1.05267,-1.05263 1.13281,-0.64981 2.10529,-1.05263c1.37531,-0.56967 1.05261,-1.05263 2.10522,-2.10527c0,0 1.13281,-0.64981 2.10529,-1.05263c1.37531,-0.56967 1.36096,-1.36093 2.10529,-2.10526c0.74432,-0.74431 2.10522,-1.05264 2.10522,-1.05264c1.05267,-1.05263 1.36096,-0.30832 2.10529,-1.05263c0.74432,-0.74432 1.05261,-1.05263 1.05261,-1.05263l0,0l0,0l1.05267,0",
    "m668.42108,83.68421c0,1.05263 1.13275,0.40282 2.10522,0c1.37531,-0.56969 1.79523,-2.46968 4.21051,-4.21053c1.90948,-1.37628 3.59882,-4.65144 5.26318,-6.31579c1.66437,-1.66438 4.96222,-4.43336 7.36841,-7.36842c1.88757,-2.30248 3.1579,-4.21051 5.26318,-6.31579c2.10522,-2.10525 3.34009,-4.05551 4.21051,-5.26316c1.37622,-1.90947 1.53558,-2.83517 2.10529,-4.21053c0.40283,-0.9725 -0.40283,-2.18539 0,-3.15789c0.56964,-1.37532 1.05261,-2.10526 1.05261,-2.10526c0,-1.05263 1.05261,-2.10526 1.05261,-3.15789c0,0 0,-1.05263 0,-2.10527c0,0 0,-1.05263 0,-1.05263c0,-1.05263 0,-2.10526 0,-2.10526c0,-1.05263 0,-1.05263 0,-2.10526c0,-1.05263 0,-1.05263 0,-2.10526c0,-1.05263 0,-1.05263 0,-2.10526c0,0 0,0 0,-1.05263c0,0 0,0 0,-1.05263c0,0 0,0 0,0c0,0 0,0 0,1.05263c0,0 0,0 0,1.05263c0,1.05263 1.05267,1.05263 1.05267,2.10526c0,1.05263 0,1.05263 0,2.10526c0,1.05263 0.48297,1.78257 1.05261,3.15789c0.40283,0.97251 0.51184,1.91974 1.05261,4.21053c0.24182,1.02448 1.05267,3.15789 1.05267,5.26316c0,2.10526 1.53558,3.88784 2.10522,5.26316c0.80566,1.94501 0.56897,5.31947 1.05267,7.36842c0.54077,2.29079 1.62152,4.26685 2.10522,6.31579c0.54077,2.29079 1.62158,4.26684 2.10529,6.31579c0.54077,2.29079 2.10522,4.21051 3.1579,6.31579c1.05261,2.10525 1.62152,4.26685 2.10522,6.31579c0.54083,2.2908 1.78162,4.40634 3.1579,6.3158c0.87042,1.20766 1.78162,3.3537 3.1579,5.26315c0.87042,1.20767 1.86346,2.13342 2.10529,3.1579c0.54077,2.29079 1.78168,3.35368 3.1579,5.26315c0.87042,1.20765 2.61707,1.91972 3.1579,4.21053c0.24188,1.02448 1.2348,1.95026 2.10522,3.1579c1.37628,1.90948 2.58826,2.83521 3.1579,4.21053c0.40283,0.97251 1.23486,1.95025 2.10529,3.1579c1.37622,1.90947 1.23486,3.00285 2.10529,4.21053c1.37628,1.90945 2.5882,2.83517 3.1579,4.21053c0.40283,0.97251 1.56445,1.91975 2.10522,4.21053c0.24182,1.02448 1.53564,1.78256 2.10529,3.15788c0.40283,0.97252 1.53558,1.78258 2.10522,3.1579c0.40283,0.9725 2.61713,2.97238 3.1579,5.26315c0.24182,1.02449 1.05267,3.1579 1.05267,3.1579c1.05261,2.10527 1.3609,2.41359 2.10522,3.1579c0.74432,0.74432 1.05267,2.10527 1.05267,3.1579c0,1.05263 1.05261,2.10526 1.05261,2.10526c0,1.05264 0.30829,2.41357 1.05261,3.1579c0.74432,0.74435 1.05267,1.05263 1.05267,2.10527c0,0 1.05261,1.05263 1.05261,1.05263c0,1.05263 1.05261,1.05263 1.05261,2.10526c0,0 0,1.05264 0,1.05264c0,0 1.05267,0 1.05267,1.05263l0,0l0,0l0,0",
    "m727.36841,194.21053c0,0 0.08014,-0.64978 1.05267,-1.05263c1.37531,-0.56967 2.54614,-2.54616 4.21051,-4.21053c1.66437,-1.66435 2.30103,-2.83426 4.21051,-4.21053c2.41534,-1.74086 3.3537,-2.83424 5.26318,-4.21053c2.41528,-1.74084 3.00287,-3.3401 4.21051,-4.21053c1.90948,-1.37628 3.00287,-2.28748 4.21051,-3.1579c1.90948,-1.37628 4.21051,-3.15788 5.26318,-4.21053c1.05261,-1.05263 2.10522,-2.10526 3.1579,-3.1579c1.05261,-1.05261 2.18536,-1.70242 3.1579,-2.10527c1.37531,-0.56967 1.3609,-2.41356 2.10522,-3.15788c0.74432,-0.74435 2.10529,-1.05264 2.10529,-1.05264c1.05261,-1.05263 1.36096,-0.30827 2.10529,-1.05263c0.74432,-0.74432 1.05261,-1.05263 1.05261,-1.05263c1.05261,-1.05263 1.05261,-1.05263 1.05261,-1.05263c1.05261,0 1.05261,-1.05264 1.05261,-1.05264c1.05267,0 1.05267,0 1.05267,0c1.05261,-1.05263 1.05261,-1.05263 1.05261,-1.05263c1.05261,0 1.05261,-1.05263 2.10529,-1.05263c0,0 0,0 1.05261,-1.05263c0,0 0.30829,0.74431 1.05261,0c0.74432,-0.74432 1.05267,-1.05264 1.05267,-1.05264c0,-1.05263 1.05261,-1.05263 1.05261,-1.05263c1.05261,-1.05263 1.05261,-1.05263 1.05261,-1.05263c1.05267,0 1.05267,-1.05264 1.05267,-1.05264c1.05261,0 1.05261,0 2.10522,-1.05263c0,0 1.05267,0 1.05267,-1.05263c0,0 1.05261,0 1.05261,0c1.05261,-1.05263 1.05261,-1.05263 1.05261,-1.05263c1.05267,-1.05264 1.05267,-1.05264 1.05267,-1.05264c1.05261,0 1.05261,-1.05263 1.05261,-1.05263c0,0 1.05261,0 1.05261,0c0,-1.05263 0,-1.05263 1.05261,-1.05263c0,0 -0.74432,-0.3083 0,-1.05263c0.74432,-0.74435 1.05267,0 1.05267,0c0,0 0,0 1.05261,-1.05264c0,0 0.30829,0.74431 1.05261,0c0.74432,-0.74432 0.30835,-0.30827 1.05267,-1.05263c0.74432,-0.74432 0.30829,-0.30832 1.05261,-1.05263c0.74432,-0.74432 1.05261,-1.05263 1.05261,-1.05263c0,0 0,-1.05264 1.05267,-1.05264c0,0 0,0 0,0c1.05261,-1.05263 1.05261,-1.05263 1.05261,-1.05263c0,0 1.05261,0 1.05261,-1.05263c0,0 0.30835,0.74435 1.05267,0c0.74432,-0.74432 1.05261,-1.05263 2.10522,-2.10527c0,0 0.72998,-1.53558 2.10529,-2.10526c0.97247,-0.40282 2.10529,-1.05264 2.10529,-1.05264c1.05261,-1.05264 2.10522,-1.05264 2.10522,-1.05264c0,-1.05263 1.05261,-1.05263 1.05261,-1.05263l0,0l0,0l1.05267,0",
)

data class PathEffectsOverviewState(
    val scratchAndAddThree: Boolean = false,
    val addPlusOne: Boolean = false,
    val showCorner: Boolean = false,
    val showStamp: Boolean = false,
    val showDash: Boolean = false,
    val showChain: Boolean = false,
)

class PathEffectsOverview : ListSlideAdvanced<PathEffectsOverviewState>() {

    override val initialState: PathEffectsOverviewState
        get() = PathEffectsOverviewState()

    override val stateMutations: List<PathEffectsOverviewState.() -> PathEffectsOverviewState>
        get() = listOf(
            { copy(scratchAndAddThree = true) },
            { copy(addPlusOne = true) },
            { copy(showCorner = true) },
            { copy(showStamp = true) },
            { copy(showDash = true) },
            { copy(showChain = true) },
        )

    @Composable
    override fun content(state: PathEffectsOverviewState) {

        val threeProgress by animateFloatAsState(
            targetValue = if (state.scratchAndAddThree) 1f else 0f,
            animationSpec = tween(2000, easing = LinearEasing)
        )

        val plusOneProgress by animateFloatAsState(
            targetValue = if (state.addPlusOne) 1f else 0f,
            animationSpec = tween(1000, easing = LinearEasing)
        )

        Column(
            modifier = Modifier.fillMaxSize().padding(32.dp),
            horizontalAlignment = Alignment.Start,
            verticalArrangement = Arrangement.Center
        ) {

            Row {
                Text(
                    text = "Four ",
                    modifier = Modifier
                        .drawWithCache {
                            val scratchPath = Path()

                            scratchPath.addSvg(
                                pathData = scratchSvg
                            )
                            scratchPath.transform(
                                Matrix().apply {
                                    scale(
                                        x = size.width / scratchPath.getBounds().width,
                                        y = size.width / scratchPath.getBounds().width,
                                    )
                                }
                            )
                            val scratchMeasure = PathMeasure()
                            scratchMeasure.setPath(scratchPath, false)

//                            val threePath = createFromSvg(threeSvg)
                            val threePath = Path()
                            threePath.addSvg(
                                threeSvg
                            )


                            val threePathBounds = threePath.getBounds().copy()
                            threePath.transform(
                                Matrix().apply {
                                    scale(
                                        x = size.width / threePath.getBounds().width,
                                        y = size.width / threePath.getBounds().width,
                                    )
                                }
                            )
                            val threeMeasure = PathMeasure()
                            threeMeasure.setPath(threePath, false)

                            val plusOnePath = Path()
                            plusOnePath.addSvg(
                                plusOneSvg
                            )
                            plusOnePath.transform(
                                Matrix().apply {
                                    scale(
                                        x = size.width / threePathBounds.width,
                                        y = size.width / threePathBounds.width,
                                    )
                                }
                            )
                            val plusOneMeasure = PathMeasure()
                            plusOneMeasure.setPath(scratchPath, false)

                            onDrawBehind {


                                drawPath(
                                    path = scratchPath,
                                    color = White,
                                    style = Stroke(
                                        width = 4f,
                                        pathEffect = PathEffect.dashPathEffect(
                                            intervals = floatArrayOf(
                                                scratchMeasure.length * (threeProgress / .5f).coerceIn(
                                                    0f..1f
                                                ), scratchMeasure.length
                                            )
                                        )
                                    )
                                )

                                translate(
                                    top = -size.height * 2
                                ) {
                                    pathsFromSvg(threeSvg).let {
                                        scale(
                                            scaleX = size.width / threePathBounds.width,
                                            scaleY = size.width / threePathBounds.width,
                                            pivot = Offset.Zero,
                                        ) {
                                            drawPaths(it, (threeProgress - .5f) / .5f)
                                        }
                                    }

                                    pathsFromSvg(plusOneSvg).let {
                                        scale(
                                            scaleX = size.width / threePathBounds.width,
                                            scaleY = size.width / threePathBounds.width,
                                            pivot = Offset.Zero,
                                        ) {
                                            drawPaths(it, plusOneProgress)
                                        }
                                    }
                                }
                            }
                        }
                        .padding(start = 8.dp),
                    style = MaterialTheme.typography.labelLarge
                )
                Text(
                    text = "Path Effects",
                    style = MaterialTheme.typography.labelLarge
                )
            }
            Spacer(Modifier.height(16.dp))

            val infinite = rememberInfiniteTransition()
            val pathEffectProgress by infinite.animateFloat(
                initialValue = 0f,
                targetValue = 1f,
                animationSpec = infiniteRepeatable(
                    animation = tween(5000, easing = LinearEasing),
                    repeatMode = RepeatMode.Restart
                )
            )
            val cornerRadiusProgress by infinite.animateFloat(
                initialValue = .001f,
                targetValue = 1f,
                animationSpec = infiniteRepeatable(
                    animation = tween(1000),
                    repeatMode = RepeatMode.Reverse
                )
            )

            PathEffectBox(
                visible = state.showCorner,
            ) {
                val path = randomPath()
                onDrawBehind {
                    drawRect(color = Neutral800)
                    drawPath(
                        path = path,
                        brush = Brush.horizontalGradient(
                            colors = listOf(Orange600, Amber300),
                            endX = size.width * 2
                        ),
                        style = Stroke(
                            width = 10.dp.toPx(),
                            cap = StrokeCap.Round,
                            pathEffect = PathEffect.cornerPathEffect(100f * cornerRadiusProgress)
                        )
                    )
                }
            }
            PathEffectBox(
                visible = state.showStamp
            ) {
                val path = randomPath()
                val measure = PathMeasure()
                measure.setPath(path, false)
                onDrawBehind {
                    drawRect(color = Neutral800)
                    drawPath(
                        path = path,
                        brush = Brush.horizontalGradient(
                            colors = listOf(
                                Amber600, Yellow200
                            ),
                            endX = size.width * 2
                        ),
                        style = Stroke(
                            width = 5.dp.toPx(),
                            cap = StrokeCap.Round,
                            pathEffect = PathEffect.stampedPathEffect(
                                shape = arrow,
                                advance = arrow.getBounds().width * 2,
                                phase = -arrow.getBounds().width * 10 * pathEffectProgress,
                                style = StampedPathEffectStyle.Rotate,
                            )
                        )
                    )
                }


            }
            PathEffectBox(
                visible = state.showDash
            ) {
                val path = randomPath()
                val measure = PathMeasure()
                measure.setPath(path, false)
                onDrawBehind {
                    drawRect(color = Neutral800)
                    drawPath(
                        path = path,
                        brush = Brush.horizontalGradient(
                            colors = listOf(
                                Yellow400, Lime300
                            ),
                            endX = size.width * 1.5f
                        ),
                        style = Stroke(
                            width = 5.dp.toPx(),
                            cap = StrokeCap.Round,
                            pathEffect = PathEffect.dashPathEffect(
                                intervals = floatArrayOf(
                                    20f, 20f
                                ),
                                phase = -measure.length * pathEffectProgress
                            )
                        )
                    )
                }
            }
            PathEffectBox(
                visible = state.showChain
            ) {
                val path = randomPath()
                val measure = PathMeasure()
                measure.setPath(path, false)


                onDrawBehind {
                    drawRect(color = Neutral800)
                    drawPath(
                        path = path,
                        brush = Brush.horizontalGradient(
                            colors = listOf(
                                Lime400,
                                Emerald300,
                            )
                        ),
                        style = Stroke(
                            width = 5.dp.toPx(),
                            cap = StrokeCap.Round,
                            pathEffect = ChainedPathEffect()
                                .cornerPathEffect((100f))
                                .dashPathEffect(
                                    intervals = floatArrayOf(
                                        arrow.getBounds().width * 2f, arrow.getBounds().width * 1f,
                                    ),
                                    phase = -measure.length * pathEffectProgress,
                                )
                                .stampedPathEffect(
                                    shape = arrow,
                                    advance = arrow.getBounds().width * 1.01f,
                                    phase = 0f,
                                    style = StampedPathEffectStyle.Rotate
                                )
                                .effect
                        )
                    )
                }
            }


        }

    }


    private fun pathsFromSvg(paths: List<String>): List<PathObject> {
        return paths.map { pathData ->
            val path = Path().apply {
                addSvg(pathData)
            }
            PathObject(
                path = path,
                measure = PathMeasure().apply {
                    setPath(path, false)
                }
            )
        }
    }

    private fun DrawScope.drawPaths(paths: List<PathObject>, progress: Float) {
        val interval = 1f / paths.size
        paths.forEachIndexed { index, pathObject ->
            val start = index * interval
            val value = (progress - start) / interval
            drawPath(
                path = pathObject.path,
                color = White,
                style = Stroke(
                    width = 10f,
                    pathEffect = PathEffect.dashPathEffect(
                        intervals = floatArrayOf(
                            pathObject.measure.length * value.coerceIn(0f, 1f),
                            pathObject.measure.length
                        )
                    )
                )
            )
        }
    }

    private fun CacheDrawScope.randomPath(): Path {
        val path = Path()
        path.moveTo(
            x = -100f,
            y = Random.nextFloat(.3f, .6f) * size.height,
        )
        for (i in 0..7) {
            path.lineTo(
                x = (i / 7f) * size.width,
                y = Random.nextFloat(.1f, .9f) * size.height,
            )
        }
        return path
    }

    private data class PathObject(
        val path: Path,
        val measure: PathMeasure,
    )

    private fun Path.addSvg(paths: List<String>) {
        paths.map { pathData ->
            val tempPath = Path()
            tempPath.addSvg(pathData)
            tempPath
        }.forEach {
            addPath(it)
        }
    }
}

@Composable
private fun ColumnScope.PathEffectBox(
    modifier: Modifier = Modifier,
    visible: Boolean = true,
    onDraw: CacheDrawScope.() -> DrawResult = { onDrawBehind { } },
) {

    AnimatedVisibility(
        visible = visible,
        modifier = modifier
    ) {
        Box(
            modifier = Modifier
                .padding(8.dp)
                .width(400.dp)
                .height(150.dp)
                .border(
                    width = 1.dp,
//                    color = Slate50.copy(alpha = .3f),
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Slate50.copy(alpha = .3f),
                            Slate50.copy(alpha = .001f),
                        )
                    ),
                    shape = RoundedCornerShape(24.dp)
                )
//                .padding(8.dp)
                .clip(RoundedCornerShape(24.dp))
                .clip(RoundedCornerShape(16.dp))
                .drawWithCache(onDraw)
        )
    }

}

val arrow = Path().apply {

    moveTo(0f, -30f)
    lineTo(0f, 30f)
    lineTo(30f, 0f)
    lineTo(0f, -30f)

    lineTo(0f, 0f)
    relativeLineTo(0f, -5f)
    relativeLineTo(-50f, 0f)
    relativeLineTo(0f, 10f)
    relativeLineTo(50f, 0f)
}